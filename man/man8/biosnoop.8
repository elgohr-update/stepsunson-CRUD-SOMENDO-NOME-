.TH biosnoop 8  "2015-09-16" "USER COMMANDS"
.SH NAME
biosnoop \- Trace block device I/O and print details incl. issuing PID.
.SH SYNOPSIS
.B biosnoop [\-h] [\-Q] [\-d DISK] [\-P]
.SH DESCRIPTION
This tools traces block device I/O (disk I/O), and prints a one-line summary
for each I/O showing various details. These include the latency from the time of
issue to the device to its completion, and the PID and process name from when
the I/O was first created (which usually identifies the responsible process).

This uses in-kernel eBPF maps to cache process details (PID and comm) by I/O
request, as well as a starting timestamp for calculating I/O latency.

This works by tracing various kernel blk_*() functions using dynamic tracing,
and will need updating to match any changes to these functions.

This makes use of a Linux 4.4 feature (bpf_perf_event_output());
for kernels older than 4.4, see the version under tools/old,
which uses an older mechanism

Since this uses BPF, only the root user can use this tool.
.SH REQUIREMENTS
CONFIG_BPF and bcc.
.SH OPTIONS
.TP
\-h
Print usage message.
.TP
\-Q
Include a column showing the time spent queued in the OS.
.TP
\-d DISK
Trace this disk only.
.TP
\-P
Display block I/O pattern (sequential or random).
.SH EXAMPLES
.TP
Trace all block device I/O and print a summary line per I/O:
#
.B biosnoop
.SH FIELDS
.TP
TIME(s)
Time of the I/O completion, in seconds since the first I/O was seen.
.TP
COMM
Cached pr